int M = maze.length;
        int N = maze[0].length;
        
        int[][] delta = new int[][] { {1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        
        int stepCount = 1;
        Queue<int[]> queue = new LinkedList<int[]>();
        queue.offer(entrance);
        maze[entrance[0]][entrance[1]] = '+';  // mark as + to indicate we cannot go back to that location
        
        int i, j, x, y, K;
        int[] current;
        
        while(!queue.isEmpty()){
            K = queue.size();
            for(i = 0; i < K; i++){
                current = queue.poll();
        
                for(j = 0; j < 4; j++){
                    x = current[0] + delta[j][0];
                    y = current[1] + delta[j][1];
                    
                    if(x >= 0 && x < M && y >= 0 && y < N){
                        if(maze[x][y] == '.'){
                            // empty cell
                            if(x == 0 || x == M - 1 || y == 0 || y == N - 1){
                                return stepCount;
                            }else{
                                maze[x][y] = '+';  // mark as + to indicate we cannot go back to that location
                                queue.offer(new int[] { x, y });
                            }
                        }
                    }
                }
            }
            
            ++stepCount;
        }
        
        return -1;
        }
   }
   
   -----------------------------------------------------------------
   
   
   class Solution {
    public int nearestExit(char[][] maze, int[] entrance) {
        int rows = maze.length, cols = maze[0].length;
        int[][] dirs = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        
        // Mark the entrance as visited since its not a exit.
        int startRow = entrance[0], startCol = entrance[1];
        maze[startRow][startCol] = '+';
        
        // Start BFS from the entrance, and use a queue `queue` to store all 
        // the cells to be visited.
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{startRow, startCol, 0});
        
        while (!queue.isEmpty()) {
            int[] currState = queue.poll();
            int currRow = currState[0], currCol = currState[1], currDistance = currState[2];

            // For the current cell, check its four neighbor cells.
            for (int[] dir : dirs) {
                int nextRow = currRow + dir[0], nextCol = currCol + dir[1];

                // If there exists an unvisited empty neighbor:
                if (0 <= nextRow && nextRow < rows && 0 <= nextCol && nextCol < cols
                   && maze[nextRow][nextCol] == '.') {
                    
                    // If this empty cell is an exit, return distance + 1.
                    if (nextRow == 0 || nextRow == rows - 1 || nextCol == 0 || nextCol == cols - 1)
                        return currDistance + 1;
                    
                    // Otherwise, add this cell to 'queue' and mark it as visited.
                    maze[nextRow][nextCol] = '+';
                    queue.offer(new int[]{nextRow, nextCol, currDistance + 1});
                }  
            }
        }

        // If we finish iterating without finding an exit, return -1.
        return -1;
    }
}

=-------------------------------------------------------




class Solution {
public:
    vector<int>rowDir = {-1, 1, 0, 0};
    vector<int>colDir = {0, 0, -1, 1};
    bool border(vector<vector<char>>&maze, int row, int col){
        if ((row == 0) || (row == maze.size() - 1)) return true;
        if ((col == 0) || (col == maze[0].size() - 1)) return true;
        return false;
    }
    bool ValStep(vector<vector<char>>&maze, int& row, int& col){
        int m = maze.size(), n = maze[0].size();
        if (row < 0 || row == m || col < 0 || col == n || maze[row][col] == '+') return false;
        else return true;
    }
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        queue<pair<int, int>>q;
        q.push({entrance[0], entrance[1]});
        int path = 0;
        maze[entrance[0]][entrance[1]] = '+'; 
        while(!q.empty()){
            int size = q.size();
            while(size--){
                int row = q.front().first;
                int col = q.front().second;
                q.pop(); 
                for (int dir = 0; dir < 4; dir++) {
                    int newRow = row + rowDir[dir];  
                    int newCol = col + colDir[dir];  
                    if (ValStep(maze, newRow, newCol)) {
                        maze[newRow][newCol] = '+';
                        if (border(maze, newRow, newCol)) return (path + 1); 
                        else q.push({newRow, newCol});
                    }
                }
            }
            path++; 
        }
        return -1;
    }
};
