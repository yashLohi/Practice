class Solution {
public:
    int minimumCostOfBreaking(vector<int> x, vector<int> y, int m, int n){
        sort(x.rbegin(), x.rend());
        sort(y.rbegin(), y.rend());
        int i=0, j=0;
        int ans=0;
        
        while(i<x.size() and j<y.size()){
            if(x[i]>y[j]){
                ans+=(j+1)*x[i];
                i++;
            }
            else{
                ans+=(i+1)*y[j];
                j++;
            }
        }
        
        while(i<x.size()){
            ans+=(j+1)*x[i];
            i++;
        }
        
        while(j<y.size()){
            ans+=(i+1)*y[j];
            j++;
        }
        return ans;
    }
};





Arrays.sort(X);
        Arrays.sort(Y);
        int i=X.length-1;
        int j=Y.length-1;
        int row=1;
        int col=1;
        int ans=0;
        while(i>=0 || j>=0){
            int a=i>=0?X[i]:-1;
            int b=j>=0?Y[j]:-1;
            if(a>=b){
                ans+=(a*row);
                col++;
                i--;
            }else{
                ans+=(b*col);
                row++;
                j--;
            }
        }
        return ans;
