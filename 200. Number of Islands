class Solution {
    public int numIslands(char[][] grid) {
       int count = 0;
        
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] == '1') {
                    count++;
                    clearRestOfLand(grid, i, j);
                }
            }
        }
        return count;
    }
    
    private void clearRestOfLand(char[][] grid, int i, int j) {
        if (i < 0 || j < 0 || i >= grid.length || j >= grid[i].length || grid[i][j] == '0') return;
        
        grid[i][j] = '0';
        clearRestOfLand(grid, i+1, j);
        clearRestOfLand(grid, i-1, j);
        clearRestOfLand(grid, i, j+1);
        clearRestOfLand(grid, i, j-1);
        return;

    }
}




//  int m = grid.size();
//         int n =grid[0].size();
//         int ans = 0;
//         int offsets[] = {0, 1, 0, -1, 0};
//         for (int i=0; i<m;i++) {
//             for (int j=0;j<n;j++) {
//                 if (grid[i][j]=='1') {
//                     ans++;
//                     grid[i][j]='0';
//                     queue<pair<int, int>> q;
//                     q.push({i, j});
//                     while (!q.empty()) {
//                         pair<int, int> p=q.front();
//                         q.pop();
//                         for (int k = 0; k < 4; k++) {
//                             int r=p.first + offsets[k];
//                             int c=p.second + offsets[k + 1];
//                             if (r >= 0 && r < m && c >= 0 && c < n && grid[r][c] == '1') {
//                                 grid[r][c] = '0';
//                                 q.push({r, c});
                                
//                             }
//                         }
//                     }
//                 }
//             }
//         }
//         return ans;
