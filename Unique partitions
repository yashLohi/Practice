class Solution
{
    void helper(ArrayList<ArrayList<Integer>> ans, ArrayList<Integer> curr, int i, int n){
        if(n == 0){
            ans.add(curr);
            return;
        }
        if(i<1){
            return;
        }
        
        if(i<=n){
            curr.add(i);
            helper(ans, curr, i, n-i);
            curr.remove(1);//have to find right ...
            helper(ans, curr, i-1, n);
        }
        else{
            helper(ans, curr, i-1, n);
        }
    }
    public ArrayList<ArrayList<Integer>> UniquePartitions(int n)
    {
        // Code here
        ArrayList<ArrayList<Integer>>ans  = new ArrayList<>();
        ArrayList<Integer> curr = new ArrayList<>();
        
        helper(ans, curr, n, n);
        return ans;
    }
}
-----------------------------------------
class Solution
{
    public ArrayList<ArrayList<Integer>> UniquePartitions(int n)
    {
        // Code here
        ArrayList<ArrayList<Integer>> ans=new ArrayList<>();
        ArrayList<Integer> curr=new ArrayList<>();
        int idx=n-1;
        
        int[]arr=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=i+1;
        }
        dfs(ans,curr,idx,n,arr);
        return ans;
    }
    void dfs(ArrayList<ArrayList<Integer>> ans,ArrayList<Integer> curr,
    int idx,int n,int[]arr){
        if(idx<0 || n<0)return;
        curr.add(arr[idx]);
        if(n-arr[idx]==0){
            ans.add(new ArrayList<>(curr));
        }
        dfs(ans,curr,idx,n-arr[idx],arr);
        curr.remove(curr.size()-1);
        dfs(ans,curr,idx-1,n,arr);
        
    }
}
Footer

---------------------------------------------
class Solution{
    public:
        void helper(vector<vector<int>>&ans,vector<int>&curr,int i,int n){
            if(n==0){
                ans.push_back(curr);
                return;
            }
            if(i<1){
                return;
            }
            if(i<=n){
                curr.push_back(i);
                helper(ans,curr,i,n-i);
                curr.pop_back();
                helper(ans,curr,i-1,n);
            }
            else{
                helper(ans,curr,i-1,n);
            }
        }
        
        vector<vector<int>> UniquePartitions(int n) {
            vector<vector<int>>ans;
            vector<int>curr;
            helper(ans,curr,n,n);
            return ans;
        }
};
