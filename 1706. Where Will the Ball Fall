class Solution {
    int dfs(int i, int j, int[][] grid){
        if(i >= grid.length){
            return j;
        }
        
//         left to right
        if(grid[i][j] == 1 && j+1<grid[0].length && grid[i][j+1] == 1){
            return dfs(i+1, j+1, grid);
        }
//         right to left
        else if(grid[i][j] == -1 && j -1>=0 && grid[i][j-1] == -1){
            return dfs(i+1, j-1, grid);
        }
        else if(grid[i][j]==1  && j+1>=grid[0].length){
            return -1;
        }
        else {
            return -1;
        }
    }
    public int[] findBall(int[][] grid) {
        int row = grid.length;
        int col = grid[0].length;
        int ans[] = new int[col];
        for(int j=0; j<col; j++){
            ans[j] = dfs(0,j,grid);
        }
        return ans;
    }
}

------------------------------------------
class Solution {
public:
    vector<int> findBall(vector<vector<int>>& grid) {
        
        int m = grid.size(), n = grid[0].size();
        
        vector<int> res;
        
        for (int i = 0; i < n; ++i) {
            
            int i1 = i, i2;
            
            for (int j = 0; j < m; ++j) {
                
                i2 = i1 + grid[j][i1];
                
                if (i2 < 0 || i2 >= n || grid[j][i2] != grid[j][i1]) {
                    i1 = -1;
                    break;
                }
                
                i1 = i2;
            }
            res.push_back(i1);
        }
        return res;
    }
};
