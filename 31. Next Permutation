public class Solution {
    public void nextPermutation(int[] nums) {
        int i = nums.length - 2;
        while (i >= 0 && nums[i + 1] <= nums[i]) {
            i--;
        }
        if (i >= 0) {
            int j = nums.length - 1;
            while (nums[j] <= nums[i]) {
                j--;
            }
            swap(nums, i, j);
        }
        reverse(nums, i + 1);
    }

    private void reverse(int[] nums, int start) {
        int i = start, j = nums.length - 1;
        while (i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}

================================================

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        
        if(nums.size()==1){
            return;
        }
        
        
        int idx1;
        for(int i=nums.size()-2;i>=0;i--){
            if(nums[i]<nums[i+1]){
                idx1=i;
                break;
            }
        }
        
        if(idx1<0){
            reverse(nums.begin(),nums.end());
        }else{
            
            int idx2=0;
            for(int i=nums.size()-1;i>=0;i--){
                if(nums[i]>nums[idx1]){
                    idx2=i;
                    break;
                }
            }
        
            swap(nums[idx1],nums[idx2]);
            
            sort(nums.begin()+idx1+1,nums.end());
            
            
        }
        
        
        
    }
};

==============================

class Solution {
    public void nextPermutation(int[] nums) {
        int ind1=-1;
        //Example
        //   3
        //  / \
        // 1   2

        //find the index of the first number that is lesser than it's next
        for(int i=nums.length-1;i>=1;i--){
            if(nums[i-1]<nums[i]){
                ind1=i-1;       //nums[ind1]=1
                break;
            }
        }
        int ind2=-1;
        //if such a number exists, for a lexicographical order, find the number immediately bigger than it
        if(ind1!=-1){
            for(int i=nums.length-1;i>=ind1;i--){
                if(nums[i]>nums[ind1]){
                    ind2=i;     //nums[ind2]=2
                    break;
                }
            }
            //perform a swap of the two numbers
            int temp=nums[ind1];
            nums[ind1]=nums[ind2];
            nums[ind2]=temp;

        //      3
        //     / \
        //    2   1
        }
        //reverse the order after the break point(ind1) to ensure the lexicographical order
        for(int i=ind1+1,j=nums.length-1;i<j;i++,j--){
            int t=nums[i];
            nums[i]=nums[j];
            nums[j]=t;
        }
        // 2   3
        //  \ /
        //   1
    }
}
