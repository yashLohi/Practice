class Solution {
    public void connect(Node root) {
        // code here
      if(root == null){
          return;
      }
        
        Queue<Node> q = new LinkedList<>();
        q.offer(root);
        
        while(!q.isEmpty()){
            int size = q.size();
            while(size-->0){
                Node curr = q.poll();
                
                if(curr.left!= null){
                    q.offer(curr.left);
                }
                
                if(curr.right != null){
                    q.offer(curr.right);
                }
                
                if(size == 0){
                    curr.nextRight = null;
                }else{
                    curr.nextRight = q.peek();
                }
            }
        }
    }
}


=====================
class Solution {
    public void connect(Node root) {
      Queue<Node> q = new ArrayDeque<>(10000);
        q.offer(root);
        while(!q.isEmpty()) {
            int size = q.size();
            ArrayList<Node> arr = new ArrayList<>(1000);
            for(int i = 0; i < size; i++) {
                Node temp = q.poll();
                arr.add(temp);
                if(temp.left != null) {
                    q.offer(temp.left);
                }
                if(temp.right != null) {
                    q.offer(temp.right);
                }
            }
            for(int i = 0; i < arr.size() - 1; i++) {
                arr.get(i).nextRight = arr.get(i+1);
            }
            arr.get(arr.size() - 1).nextRight = null;
        }
        
    }
}



class Solution{
    public:
    void connect(Node *root){
       queue<Node * > q;
       q.push(root);
       while(!q.empty()){
        int size = q.size();
        while(size--){
            Node * temp= q.front();
            q.pop();
            if(size==0){
                temp->nextRight = NULL;
            }
            else{
                temp->nextRight = q.front();
            }
            if(temp->left) q.push(temp->left);
            if(temp->right) q.push(temp->right);
        }
       }
    }   
};
