class Node{
    int first;
    int second;
    int third;
    Node(int first, int second, int third){
        this.first;
        this.second;
        this.third;
    }
}
class Solution {
    
    public int[][] updateMatrix(int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;
        int vis[][] = new int[n][m];
        int dis[][] = new int[n][m];
        Queue<Node> q = new LinkedList<Node>();
        for(int i = 0; i<n; i++){
            for(int j =0; j<m; j++){
                if(mat[i][j] == 0){
                    q.add(new Node{i,j,0});
                    vis[i][j] = 1;
                }
                else {
                    vis[i][j] = 0;
                }
            }
        }

        int delrow[] = {-1, 0, +1, 0};
        int delcol[] = {0, +1, 0, -1};

        while(!q.isEmpty()){
            int row = q.peek().first;
            int col = q.peek().second;
            int steps = q.peek().third;

            q.remove();
            dis[row][col] = steps;
            for(int i =0; i<4; i++){
                int nrow = row + delrow[i];
                int ncol = col + delcol[i];

                if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < n && vis[nrow][ncol] == 0){
                    vis[nrow][ncol] = 1;
                    q.add(new Node(nrow, ncol, steps+1));
                }  
            }
        }
        return dis;
    }
}


================================
  int m = matrix.length, n = matrix[0].length;
        int[][] distance = new int[m][n];

        for (int r = 0; r < m; r++) {
            Arrays.fill(distance[r], MAX_DISTANCE);
        }

        for (int r = 0; r < m; r++) {
            for (int c = 0; c < n; c++) {
                if (matrix[r][c] == 0) {
                    distance[r][c] = 0;
                    continue;
                }

                if (r > 0) distance[r][c] = Math.min(distance[r][c], distance[r - 1][c] + 1);
                if (c > 0) distance[r][c] = Math.min(distance[r][c], distance[r][c - 1] + 1);
            }
        }

        for (int r = m - 1; r >= 0; r--) {
            for (int c = n - 1; c >= 0; c--) {
                if (r != m - 1) distance[r][c] = Math.min(distance[r][c], distance[r + 1][c] + 1);
                if (c != n - 1) distance[r][c] = Math.min(distance[r][c], distance[r][c + 1] + 1);
            }
        }

        return distance;

