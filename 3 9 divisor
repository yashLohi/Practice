class Solution{
    static ArrayList<Integer> threeDivisors(ArrayList<Long> query, int qn){ 
        // code here
        int n=0;
        for(Long q:query){
            n=Math.max(n,(int)Math.sqrt(q));
        }
        boolean[] prime=new boolean[n+1];
        Arrays.fill(prime,true);
        for(int i=2;i<=n;i++){
            if(prime[i]){
                for(int j=i+i;j<=n;j+=i){
                    prime[j]=false;
                }
            }
        }
        
        int[]dp=new int[n+1];
        for(int i=2;i<=n;i++){
            dp[i]=dp[i-1];
            if(prime[i]){
                dp[i]++;
            }
        }
        ArrayList<Integer> ans=new ArrayList<>();
        for(Long q:query){
            int root=(int)Math.sqrt(q);
            ans.add(dp[root]);
        }
        return ans;
    }
}


/* 

Link to the "Distance of nearest cell having 1" Problem ==>>  https://practice.geeksforgeeks.org/problems/3-divisors3942/1 
   
Link to the complete Explaination Video ==>> https://youtu.be/xcZLT7MIoag 
   
*/



class Solution
{
public:
    vector<int> threeDivisors(vector<long long> query, int q)
    {
        vector<int>fin;
        vector<long long int>v;
        long long int p;
        long long int i,j;
        p=ceil(sqrt(*max_element(query.begin(), query.end())));
        long long int arr[p]={0};
        for(i=2;i<=sqrt(p);i++){
            
            for(j=i*i;j<=p;j+=i)
                arr[j]=1;
        }

        for(i=2;i<=p;i++){
            if(arr[i] == 0)
                v.push_back(i);
        }

        
        
        for(i=0;i<query.size();i++){
            
            long long int target=query[i],c=0,index;
            
            if(target == 2 || target == 1 || target==3)
                fin.push_back(0);
            else{
                
            long long int l=0,r=v.size()-1,m=(l+r)/2;
            
            while(l<=r){
                
                if(v[m]*v[m]<target){
                    c++;
                    index=m;
                    l=m+1;
                }
                else if (v[m]*v[m] ==  target){
                    c++;
                    index=m;
                    break;
                }
                else if (v[m]*v[m] > target){
                    r=m-1;
                }
                m=(l+r)/2;
            }
            if(c>0)
                fin.push_back(index+1); }
        }
        return fin;
    }
};




====================================
9 divisor


class Solution{
    static long nineDivisors(long N){
        //Code Here
        long ans=0;
        int size=(int)Math.sqrt(N);
        int prime[]=new int[size+1];
        for(int i=1;i<=size;i++){
            prime[i]=i;
        }
        
        //fill sieve
        for(int i=2;i*i<=size;i++){
            if(prime[i]==i){
                for(int j=i*i;j<=size;j+=i){
                    if(prime[j]==j){
                        prime[j]=i;
                    }
                }
            }
        }
        //check for root n
        for(int i=2;i<=size;i++){
            int p=prime[i];
            
            int q=prime[i/p];
            
            if((p!= q && p*q==i && q!=1) ||
            (prime[i]==i && Math.pow(i,8)<=N)){
                ans+=1;
            }
        }
        return ans;
    }
}
