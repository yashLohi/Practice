class Solution {
    int res = 0;
    public int maxAncestorDiff(TreeNode root) {
        int mx = Integer.MIN_VALUE;
        int mn = Integer.MAX_VALUE;
        pre(root, mx, mn);
        return res;
    }

    void pre(TreeNode node, int mx, int mn){
        if(node == null)return;
        if(mx != Integer.MIN_VALUE) res = Math.max(res, Math.abs(mx - node.val));
        if(mn != Integer.MAX_VALUE) res = Math.max(res, Math.abs(node.val - mn));
        mx = Math.max(mx, node.val);
        mn = Math.min(mn, node.val);
        pre(node.left, mx, mn);
        pre(node.right, mx, mn);

    }
}

=======================
class Solution {
    private int maxDiff = Integer.MIN_VALUE;
    
    public int maxAncestorDiff(TreeNode root) {
        dfs(root, root, root);
        return maxDiff;
    }
    
    public void dfs(TreeNode node, TreeNode maxNode, TreeNode minNode) {
        if (node == null) return;
        
        if (node.val > maxNode.val) maxNode = node;
        if (node.val < minNode.val) minNode = node;
        
        maxDiff = Math.max(maxDiff, Math.abs(maxNode.val - minNode.val));
        
        dfs(node.left, maxNode, minNode);
        dfs(node.right, maxNode, minNode);
    }
    
}
