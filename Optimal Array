

class Solution {
    public long[] optimalArray(int n,int a[])
    {
        long ans[] = new long[n];

        int idx =0;
        int  s1=0; int s2=0;
        for(int i=0; i<(n+1)/2 ;i++)
        {
            s1+=a[i];

            if(2*i < n)
            {
                s2+= a[2*i];
                int curr_ans = ((i+1)*a[i] - s1)  + (s2-s1) -i*a[i];
                ans[idx++] =curr_ans;
            }

            if(2*i+1<n)
            {
                s2+= a[2*i+1];
                int curr_ans = ((i+1)*a[i] - s1)  + (s2-s1) -(i+1)*a[i];
                ans[idx++] =curr_ans;
            }
        }
        return ans;
    }
}
        

class Solution {
    public long[] optimalArray(int n,int a[])
    {
         long[] arr=new long[n];
        arr[0]=0;
        for(int i=1;i<n;i++)
        {
           // System.out.println(i);
           arr[i]=arr[i-1]+a[i]-a[i/2];
           
        }
        return arr;
    }
}

class Solution{
public:
    vector<int> optimalArray(int n,vector<int> &arr){
        vector<int> ans;
        vector<int> sum(n,0);
        sum[0]=arr[0];
        ans.push_back(0);
        for(int i=1;i<n;i++){
            sum[i]+=sum[i-1]+arr[i];
            int curr=0;
            if(i%2==0){
                int j=i/2;
                int sum1 = sum[j-1];
                int sum2 = sum[i]- sum[j];
                curr=sum2-sum1;
            }
            else{
                int j=i/2;
                int sum1=sum[j];
                int sum2=sum[i]-sum[j];
                curr=sum2-sum1;
            }
            ans.push_back(curr);
        }
        return ans;
    }
};
