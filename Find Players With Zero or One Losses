class Solution {
    public List<List<Integer>> findWinners(int[][] matches) {
        Set<Integer> seen = new HashSet<>();
        Map<Integer, Integer> lossesCount = new HashMap<>();

        for (int[] match : matches) {
            int winner = match[0], loser = match[1];
            seen.add(winner);
            seen.add(loser);
            lossesCount.put(loser, lossesCount.getOrDefault(loser, 0) + 1);
        }

        // Add players with 0 or 1 loss to the corresponding list.
        List<List<Integer>> answer =
            Arrays.asList(new ArrayList<>(), new ArrayList<>());
        for (int player : seen) {
            if (!lossesCount.containsKey(player)) {
                answer.get(0).add(player);
            } else if (lossesCount.get(player) == 1) {
                answer.get(1).add(player);
            }
        }

        Collections.sort(answer.get(0));
        Collections.sort(answer.get(1));

        return answer;
    }
}


=---------------------0
class Solution {
public:
    vector<vector<int>> findWinners(vector<vector<int>>& matches) {
        unordered_set<int> u;
        map<int,int> m;
        int n=matches.size();
        for(int i=0;i<n;i++){
            u.insert(matches[i][1]);
            u.insert(matches[i][0]);
            m[matches[i][1]]++;
        }
        vector<vector<int>> ans(2);
        n=u.size();
        
        for(auto i=u.begin();i!=u.end();i++){
            if(!m[*i])    ans[0].push_back(*i);
            else if(m[*i]==1)   ans[1].push_back(*i);
        }
        
        sort(ans[1].begin(),ans[1].end());
        sort(ans[0].begin(),ans[0].end());
        
        return ans;
    }
};
