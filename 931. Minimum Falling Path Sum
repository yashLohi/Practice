class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int min = Integer.MAX_VALUE;
        int[][] dp = new int[matrix.length][matrix[0].length];
        for(int[] d : dp) Arrays.fill(d, Integer.MAX_VALUE);
        for(int i = 0; i < matrix[0].length; i++) min = Math.min(min, helper(dp, matrix, 0, i));
        return min;
    }
    
    public int helper(int[][] dp, int[][] arr, int i, int j){
        if(i == arr.length) return 0;
        else if(j < 0 || j >= arr[0].length) return Integer.MAX_VALUE;
        else if(dp[i][j] != Integer.MAX_VALUE) return dp[i][j];
        else {
            int left = helper(dp, arr, i + 1, j - 1);
            int below = helper(dp, arr, i + 1, j);
            int right = helper(dp, arr, i + 1, j + 1);
            return dp[i][j] = arr[i][j] + Math.min(below, Math.min(left, right));
        }
    }
}

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& A) {
        int sum =0;
        for (int i = A.size()-2; i>=0; --i){
            for (int j = 0; j < A[0].size(); ++j){
                if (j>0 && j <A[0].size()-1)
                    A[i][j] += min(A[i+1][j], min(A[i+1][j-1], A[i+1][j+1]));
                else if (j == 0)
                    A[i][j] += min(A[i+1][j], A[i+1][j+1]);
                else 
                    A[i][j] += min(A[i+1][j],A[i+1][j-1]);
            }
        }
        sum = A[0][0];
        for (int i=0; i <A[0].size(); ++i)
        if (sum > A[0][i])
            sum = A[0][i];
        return sum;
    }
};
