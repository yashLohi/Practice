class Solution {
    public int minimumAverageDifference(int[] sums) {
        long[] arr = new long[sums.length];
        long sum = 0;
        for(int i = 0; i < sums.length; i++){
            sum += sums[i];
            arr[i] = sum;
        }
        
        long min = Integer.MAX_VALUE;
        long max = arr[arr.length - 1];
        int index = 0;
        
        for(int i = 0; i < arr.length; i++){
            long current = arr[i] / (i + 1);
            int temp = arr.length - i - 1;
            long remain = (max - arr[i]) / (temp == 0 ? 1 : temp);
            long result = Math.abs(current - remain);
            
            if(result < min){
                min = result;
                index = i;
            }
        }
        
        return index;
        
    }
}

========================================
class Solution {
public:
    int minimumAverageDifference(vector<int>& nums) {
        long long total=0;
        long long sum=0;
        long long mini=INT_MAX;
        int ans=0;
        for(int i=0;i<nums.size();i++){
            total+=nums[i];
        }
        for(int i=0;i<nums.size();i++){   
            sum+=nums[i];
            long long t=total-sum;
            long long temp=nums.size()-i-1;
            int ne=0;
            if(temp==0){
                ne=sum/(i+1);
            }
            else{
               ne=(abs(sum/(i+1) - (t/temp)));
            }
            if(mini>ne){
                mini=ne;
                ans=i;
            }
        }
        return ans;
    }
};
