public boolean isValidSudoku(char[][] board) {
    Set seen = new HashSet();
    for (int i=0; i<9; ++i) {
        for (int j=0; j<9; ++j) {
            char number = board[i][j];
            if (number != '.')
                if (!seen.add(number + " in row " + i) ||
                    !seen.add(number + " in column " + j) ||
                    !seen.add(number + " in block " + i/3 + "-" + j/3))
                    return false;
        }
    }
    return true;
}

----------------------------------------
 public boolean isValidSudoku(char[][] board) {
    if(board == null || board.length != 9 || board[0].length != 9)
        return false;
        
    // row map - to map each row from 0 to 9 with digits from 0 - 9 using boolean(i.e for each row) -->[rownum][digit]
	boolean row[][] = new boolean[9][9];
	// col map - similar as above
	boolean col[][] = new boolean[9][9];
	// box map - numbered from 00, 01, 02, 10, 11, 12, 20, 21, 22. Each box with boolean values  0-9 for mapping digits 
	boolean box[][][] = new boolean[3][3][9];
	for (int r = 0; r < board.length; r++) {
		for (int c = 0; c < board[0].length; c++) {
			char ch = board[r][c];
			if (ch == '.')
				continue;
			else if (ch >= '1' && ch <= '9') {
				int num = ch - '0' - 1; // -1 beacuse row, col and box maps indices are 0 based

				if (row[r][num])
					return false;
				row[r][num] = true;
				if (col[c][num])
					return false;
				col[c][num] = true;
				if (box[r / 3][c / 3][num])
					return false;
				box[r / 3][c / 3][num] = true;
			} else
				return false;
		}
	}
	return true;
}

---------------------------------
public boolean isValidSudoku(char[][] board) {
        boolean[][] rows = new boolean[9][9];
        boolean[][] columns = new boolean[9][9];
        boolean[][] squares = new boolean[9][9];
        for (int i = 0; i < board.length; i++) {
          for (int j = 0; j < board[i].length; j++) {
            if (board[i][j] == '.') {
              continue;
            }
            int num = board[i][j] - '1';
            if (rows[i][num]) {
              return false;
            }
            rows[i][num] = true;
            if (columns[j][num]) {
              return false;
            }
            columns[j][num] = true;
            if (squares[(i / 3) * 3 + j / 3][num]) {
              return false;
            }
            squares[(i / 3) * 3 + j / 3][num] = true;
          }
        }
        return true;
    }
    
    ========================================
    class Solution
{
public:
    bool isValidSudoku(vector<vector<char> > &board)
    {
        int used1[9][9] = {0}, used2[9][9] = {0}, used3[9][9] = {0};   
        for(int i = 0; i < board.size(); ++ i)
            for(int j = 0; j < board[i].size(); ++ j)
                if(board[i][j] != '.'){
                    int num = board[i][j] - '0' - 1, k = (i/3)*3+ j / 3;   
                    if(used1[i][num] || used2[j][num] || used3[k][num])
                        return false;
                    used1[i][num] = used2[j][num] = used3[k][num] = 1;
                }
        return true;
    }
};
